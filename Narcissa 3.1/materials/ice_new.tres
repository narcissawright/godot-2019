[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://materials/texture/ice_seamless_contrast.png" type="Texture" id=1]

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,world_vertex_coords;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec4 dark_color : hint_color;
uniform vec4 light_color : hint_color;

void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

bool get_shiny(float uvt) {
		if (cos(uvt/1.5) < -0.98) {
			return true;
		}
	return false;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = dark_color.rgb + (albedo_tex.rgb * light_color.rgb);
	ROUGHNESS = 0.0;
	EMISSION = vec3(0.01, 0.02, 0.1) / (albedo_tex.rgb / 2.0 + 0.5) ;
	
	/*
	bool shiny = get_shiny(UV.x - UV.y - TIME*3.0);
	if (shiny) {
		ALBEDO = dark_color.rgb + (albedo_tex.rgb * light_color.rgb) + vec3(0.3, 0.3, 0.6);
	}
	*/
}"

[resource]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 0.1, 0.1, 0.1 )
shader_param/dark_color = Color( 0.352941, 0.745098, 1, 1 )
shader_param/light_color = Color( 0.709804, 0.933333, 1, 1 )
shader_param/texture_albedo = ExtResource( 1 )

